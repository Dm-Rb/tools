import customtkinter as ctk
from tkinter import messagebox, filedialog
import threading
import csv
import chardet
from queue import Queue
from time import sleep


# requirements
# cchardet==2.1.7
# chardet==5.2.0
# customtkinter==5.2.2
# darkdetect==0.8.0
# numpy==2.0.2
# packaging==24.2
# pandas==2.2.3
# python-dateutil==2.9.0.post0
# pytz==2025.1
# six==1.17.0
# tzdata==2025.1


class App(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.geometry("520x180")
        self.minsize(260, 160)
        self.title("Объединение CSV")

        self.grid_columnconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(2, weight=1)

        self.btn_select_file = ctk.CTkButton(self, text="Добавить файл", command=self.select_input_file)
        self.btn_select_file.grid(row=0, column=0, padx=10, pady=10, sticky="ew")

        self.run_button = ctk.CTkButton(self, text="Старт", command=self.command_start_processing)
        self.run_button.grid(row=0, column=1, padx=10, pady=10, sticky="ew")

        self.textbox = ctk.CTkTextbox(self, fg_color="#FFFFFF", font=("Courier New", 14), state="normal")
        self.textbox.grid(row=2, column=0, columnspan=2, pady=10, padx=10, sticky="nsew")

        self.data = {'input_files': [], 'output_file': ''}
        self.queue_to_gui = Queue()
        self.flag = False


    def select_input_file(self):
        if self.flag:
            self.textbox.delete("1.0", "end")
            self.flag = False

        selected_file = filedialog.askopenfilename(title="Выберите CSV файл",
                                                   filetypes=[("CSV files", "*.csv"), ("All files", "*.*")])
        if selected_file:
            self.textbox.insert("end", f"> {selected_file}\n")

    def select_output_file(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".csv",
                                                 filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
                                                 title="Выберите место для сохранения", initialfile="data_table.csv")
        if file_path:
            self.data['output_file'] = file_path

    def command_start_processing(self):
        text = self.textbox.get("1.0", "end-1c").strip()
        self.data['input_files'] = [i.lstrip('>').strip() for i in text.split('\n') if i]

        if not self.data['input_files']:
            messagebox.showerror("Ошибка", "Не выбрано ни одного файла .csv!")
            return

        self.select_output_file()
        if not self.data['output_file']:
            return

        threading.Thread(target=ProcessingFiles.join_tables, daemon=True, args=[self.data, self.queue_to_gui]).start()
        threading.Thread(target=self.queue_to_gui_reading, daemon=True).start()
        self.btn_select_file.configure(state="disabled")
        self.run_button.configure(state="disabled")

    def queue_to_gui_reading(self):
        while True:
            if not self.queue_to_gui.empty():
                item = self.queue_to_gui.get()
                if item == "Готово":
                    self.update_textbox(item)
                    self.flag = True
                    self.data = {'input_files': [], 'output_file': ''}
                    self.btn_select_file.configure(state="normal")
                    self.run_button.configure(state="normal")
                    break
                else:
                    self.update_textbox(str(item))

            sleep(0.1)

    def update_textbox(self, val):
        self.textbox.insert("end", f"> {val}\n")
        self.textbox.yview_moveto(1)


class ProcessingFiles:
    headers = []

    @classmethod
    def read_csv_file(cls, path2file, delimiter=';'):
        data = []
        with open(path2file, 'rb') as f:
            encoding = chardet.detect(f.read(1024))['encoding']

        with open(path2file, mode='r', encoding=encoding, newline='') as f:
            reader = csv.DictReader(f, delimiter=delimiter)
            if not cls.headers:
                cls.headers = reader.fieldnames or []
            else:
                for field in reader.fieldnames or []:
                    if field not in cls.headers:
                        cls.headers.append(field)
            data.extend(reader)
        return data

    @classmethod
    def join_tables(cls, data, queue_to_gui):
        all_data = []
        cls.headers = []
        try:
            for file in data['input_files']:
                all_data.extend(cls.read_csv_file(file))
                queue_to_gui.put(f'Прочитан файл: {file}')

            queue_to_gui.put(f"Начинаю запись данных в новый файл {data['output_file']}")

            with open(data['output_file'], mode='w', newline='', encoding='utf-8') as file:
                writer = csv.DictWriter(file, fieldnames=cls.headers)
                writer.writeheader()
                writer.writerows(all_data)
            queue_to_gui.put(f'Записано {str(len(all_data))} строк')
            queue_to_gui.put("Готово")
            cls.headers.clear()
            all_data.clear()
        except Exception as _ex:
            queue_to_gui.put(f'Ошибка: {_ex}')
            queue_to_gui.put("Готово")

if __name__ == '__main__':
    app = App()
    app.mainloop()
